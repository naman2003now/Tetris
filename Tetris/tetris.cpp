
namespace tetris{

	inline int level(int number) {
		//Level in Frames before every drop
		int levelvar[] = { 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,4, 4, 4,4 };

		return levelvar[number];
	}

	inline int piece(int piece_number, int rotation, int cell_number, int coord) {
		//Piece 
		int piecesvar[7][4][4][2] = {
			//O-Shape
			{
				{{0, -1}, {0, 0}, {-1, -1}, {-1, 0}},
				{{0, -1}, {0, 0}, {-1, -1}, {-1, 0}},
				{{0, -1}, {0, 0}, {-1, -1}, {-1, 0}},
				{{0, -1}, {0, 0}, {-1, -1}, {-1, 0}}
			},

			//T-shape
			{
				{{-1, 0}, {0, -1}, {0, 0}, {1, 0}},
				{{0, -1}, {0, 0}, {0, 1}, {1, 0}},
				{{-1, 0}, {0, 0}, {0, 1}, {1, 0}},
				{{-1, 0}, {0, -1}, {0, 0}, {0, 1}}
			},

			//L-shape
			{
				{{-1, 0}, {0, 0}, {1, -1}, {1, 0}},
				{{0, -1}, {0, 0}, {0, 1}, {1, 1}},
				{{-1, 0}, {-1, 1}, {0, 0}, {1, 0}},
				{{-1, -1}, {0, -1}, {0, 0}, {0, 1}}
			},

			//Anti-L-shape
			{
				{{-1, -1}, {-1, 0}, {0, 0}, {1, 0}},
				{{0, -1}, {0, 0}, {0, 1}, {1, -1}},
				{{-1, 0}, {0, 0}, {1, 0}, {1, 1}},
				{{-1, 1}, {0, -1}, {0, 0}, {0, 1}}
			},

			//Z-shape
			{
				{{-1, -1}, {0, -1}, {0, 0}, {1, 0}},
				{{0, 0}, {0, 1}, {1, -1}, {1, 0}},
				{{-1, 0}, {0, 0}, {0, 1}, {1, 1}},
				{{-1, 0}, {-1, 1}, {0, -1}, {0, 0}}
			},

			//S-shape
			{
				{{-1, 0}, {0, -1}, {0, 0}, {1, -1}},
				{{0, -1}, {0, 0}, {1, 0}, {1, 1}},
				{{-1, 1}, {0, 0}, {0, 1}, {1, 0}},
				{{-1, -1}, {-1, 0}, {0, 0}, {0, 1}}
			},

			//I-shape
			{
				{{-1, 0}, {0, 0}, {1, 0}, {2, 0}},
				{{1, -2}, {1, -1}, {1, 0}, {1, 1}},
				{{-1, 1}, {0, 1}, {1, 1}, {2, 1}},
				{{0, -2}, {0, -1}, {0, 0}, {0, 1}}
			}
		};

		return piecesvar[piece_number][rotation][cell_number][coord];
	}
}